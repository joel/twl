name: Tests

on: [push,pull_request]

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        ruby-version:  [ '3.0.0' ]
        rails-version: [ '6.1.3.1' ]
        node-version:  [ '15' ]
        experimental:  [ false ]
        include:
          - ruby-version: '3.0.0'
            rails-version: 'main'
            node-version: '15'
            experimental: true
          - ruby-version: 'ruby-head'
            rails-version: '6.1.3.1'
            node-version: '15'
            experimental: true
          - ruby-version: 'ruby-head'
            rails-version: 'main'
            node-version: '15'
            experimental: true

    name: Run Test Suite + System
    runs-on: ubuntu-latest

    continue-on-error: ${{ endsWith(matrix.ruby-version, 'head') || matrix.rails-version == 'main' }}

    env:
      RAILS_VERSION: ${{ matrix.rails-version }}
      RUBY_VERSION: ${{ matrix.ruby-version }}
      DB_HOST: localhost
      DB_PASSWORD: pg_password
      DB_PORT: 5432

    # Services
    services:
      # Label used to access the service container
      db:
        image: postgres:13.2-alpine

        env:
          POSTGRES_PASSWORD: pg_password

        # Set health checks to wait until db has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
    - uses: actions/checkout@v2

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ job.test.env.RUBY_VERSION }}
        # bundler-cache: true

    # Cache Can't Apply Because HashFiles Can't Receive Dynamic Value From The Matrix
    # https://github.community/t/is-hashfiles-of-actions-cache-can-be-dynamic/171342
    # - name: Cache gems
    #   uses: actions/cache@v1
    #   with:
    #     path: vendor/bundle
    #     key: ${{ runner.os }}-test-${{ hashFiles('**/Gemfile.lock') }}
    #     restore-keys: |
    #       ${{ runner.os }}-test-

    - name: Install Ruby dependencies
      env:
        MATRIX_RAILS_VERSION: ${{ matrix.rails-version }}
      run: |
        export BUNDLE_GEMFILE="${GITHUB_WORKSPACE}/gemfiles/rails_${MATRIX_RAILS_VERSION}.gemfile"
        echo "BUNDLE_GEMFILE: [${BUNDLE_GEMFILE}]"
        rm -rf Gemfile.lock
        sudo apt-get --assume-yes install libpq-dev
        gem install bundler:'>= 2.2.x'
        bundle config path vendor/bundle
        bundle config set without 'production'
        bundle install --jobs 4 --retry 3

    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"

    - name: Cache Js dependencies
      uses: actions/cache@v2.1.4
      id: yarn-cache
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install NodeJs ${{ matrix.node-version }}
      uses: actions/setup-node@v2.1.5
      with:
        node-version: ${{ matrix.node-version }}
        check-latest: true

    - name: Cache Node Modules
      uses: actions/cache@v2.1.4
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

    - name: Install Js dependencies
      if: steps.yarn-cache.outputs.cache-hit != 'true'
      run: |
        echo "NODE VERSION: $(node -v)"
        yarn --frozen-lockfile

    - name: Create database
      env:
        RAILS_ENV: test
        MATRIX_RAILS_VERSION: ${{ matrix.rails-version }}
      run: |
        export BUNDLE_GEMFILE="${GITHUB_WORKSPACE}/gemfiles/rails_${MATRIX_RAILS_VERSION}.gemfile"
        echo "BUNDLE_GEMFILE: [${BUNDLE_GEMFILE}]"
        bundle exec rails db:create db:migrate

    - name: Run Unit Tests
      env:
        MATRIX_RAILS_VERSION: ${{ matrix.rails-version }}
      run: |
        export BUNDLE_GEMFILE="${GITHUB_WORKSPACE}/gemfiles/rails_${MATRIX_RAILS_VERSION}.gemfile"
        echo "BUNDLE_GEMFILE: [${BUNDLE_GEMFILE}]"
        bundle exec rails test

    - name: Run System tests
      env:
        CHROME_HEADLESS: true
        MATRIX_RAILS_VERSION: ${{ matrix.rails-version }}
      run: |
        export BUNDLE_GEMFILE="${GITHUB_WORKSPACE}/gemfiles/rails_${MATRIX_RAILS_VERSION}.gemfile"
        echo "BUNDLE_GEMFILE: [${BUNDLE_GEMFILE}]"
        bundle exec rails test:system
